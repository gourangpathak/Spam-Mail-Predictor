# -*- coding: utf-8 -*-
"""Spam Mail Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MmnIIcLWBKINYYsmwwJEoHpXMvifgbua

Including the Libraries
"""

import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

"""Data Pre Processing"""

# Loading the data into a pandas DataFrame
unprocessed_mail_data = pd.read_csv('/content/mail_data.csv')

# Replacing Null values with empty string
mail_data = unprocessed_mail_data.where((pd.notnull(unprocessed_mail_data)), '')

# The First 5 Rows of my DataFrame
mail_data.head()

# Getting the size of the dataset in the DataFrame
mail_data.shape

"""Label Encoding i.e. ham = 1, spam = 0"""

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

mail_data.head()

"""Seperating Data into features and labels"""

X = mail_data['Message']

Y = mail_data['Category']

print(X)

print(Y)

"""Doing Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 3)

print(X_train.shape)

"""Extracting the Features (Converting the Message text)"""

# transform the text data to feature vectors that we can use as an input to our Logistic Regression model
# basically if a text (like 'Get FREE Access' or some spam text) is repeated more times it gets some score which denotes its importance
feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True')

X_train_features = feature_extraction.fit_transform(X_train)

X_test_features = feature_extraction.transform(X_test)

# converting Y_train and Y_test to integers

Y_train = Y_train.astype('int')

Y_test = Y_test.astype('int')

print(X_train_features)

"""Training Our Logistic Regression Model"""

model = LogisticRegression()

# training the model with our data
model.fit(X_train_features, Y_train)

"""Evaluating the Model (Accuracy Score)"""

# Prediction on the training data

prediction_on_training_data = model.predict(X_train_features)

# Comparing Values Predcted by the model and actual values

accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print("The Accuracy Of the Predictions On Training Data is", accuracy_on_training_data)

# Prediction on the testing data

prediction_on_testing_data = model.predict(X_test_features)

# Comparing Values Predcted by the model and actual values

accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print("The Accuracy Of the Predictions On Testing Data is", accuracy_on_testing_data)

"""Predicting System from the Model"""

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times."]

# Converting input text to a feature Vector

input_data_feature = feature_extraction.transform(input_mail);

prediction = model.predict(input_data_feature)
 
if(prediction[0] == 1): 
  print("It's Not a Spam Mail")
else: 
  print("It's a Spam Mail")